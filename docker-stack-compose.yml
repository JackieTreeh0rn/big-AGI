version: '3.9'

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "1m"
    max-file: "1"
    tag: "{{.Name}}"

services:
  big-agi:
    image: ghcr.io/enricoros/big-agi:development #registry.bitwisesolutions.co/big-agi:latest
    # extra_hosts:
    #   - host.docker.internal:host-gateway    # local docker only
    # ports:
    #   - "3000:3000"
    env_file:
      - .env
    environment:
      - PUPPETEER_WSS_ENDPOINT=ws://browserless:3000
    networks:
      - backend
      - traefik-public
    command: [ "next", "start", "-p", "3000" ]
    depends_on:
      - browserless
    deploy:
      mode: replicated
      restart_policy:
        condition: on-failure
      replicas: 1
      placement:
        constraints:
          - node.labels.GLUSTER == YES
      # update_config:
      #   parallelism: 1
      #   delay: 1m
      #   monitor: 15s
      labels:
        - traefik.enable=true
        - traefik.swarm.network=traefik-public
        # - traefik.http.routers.${ROUTER_NAME}.rule=Host(`bigagi.${ROOT_DOMAIN}`) && PathPrefix(`/public`)
        - traefik.http.routers.${ROUTER_NAME}.rule=Host(`${ROUTER_NAME}.${ROOT_DOMAIN}`)
        # Setting this in global -- command config above for all services
        # - traefik.http.routers.${ROUTER_NAME}.tls=true
        # - traefik.http.routers.${ROUTER_NAME}.tls.certresolver=letsencrypt
        # - traefik.http.routers.${ROUTER_NAME}.tls.domains[0].main=${ROOT_DOMAIN}
        # - traefik.http.routers.${ROUTER_NAME}.tls.domains[0].sans=*.${ROOT_DOMAIN}
        # - traefik.http.routers.${ROUTER_NAME}.entrypoints=websecure
        - traefik.http.routers.${ROUTER_NAME}.middlewares=chain-oauth-v2@file,error-pages
        - traefik.http.routers.${ROUTER_NAME}.service=${ROUTER_NAME}-svc
        - traefik.http.services.${ROUTER_NAME}-svc.loadbalancer.server.port=3000
        # Only service with this constrain will get picked up by cloudflare companion
        - traefik.constraint=traefik-public
    logging: *default-logging


  browserless:
    image: browserless/chrome:latest
    ports:
      - "9222:3000"  # Map host's port 9222 to container's port 3000
    environment:
      - MAX_CONCURRENT_SESSIONS=10
    deploy:
      mode: replicated
      restart_policy:
        condition: on-failure
      replicas: 1
      placement:
        constraints:
          - node.labels.GLUSTER == YES
    networks:
      - backend
    logging: *default-logging


networks:
  backend:
    name: ${BACKEND_NETWORK_NAME}
    external: true
  traefik-public:
    external: true